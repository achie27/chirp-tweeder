/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Get2ListsIdResponse,
  Get2UsersIdFollowedListsResponse,
  Get2UsersIdListMembershipsResponse,
  Get2UsersIdOwnedListsResponse,
  Get2UsersIdPinnedListsResponse,
  ListAddUserRequest,
  ListCreateRequest,
  ListCreateResponse,
  ListDeleteResponse,
  ListFollowedRequest,
  ListFollowedResponse,
  ListMutateResponse,
  ListPinnedRequest,
  ListPinnedResponse,
  ListUnpinResponse,
  ListUpdateRequest,
  ListUpdateResponse,
  Problem,
} from '../models';
import {
    Get2ListsIdResponseFromJSON,
    Get2ListsIdResponseToJSON,
    Get2UsersIdFollowedListsResponseFromJSON,
    Get2UsersIdFollowedListsResponseToJSON,
    Get2UsersIdListMembershipsResponseFromJSON,
    Get2UsersIdListMembershipsResponseToJSON,
    Get2UsersIdOwnedListsResponseFromJSON,
    Get2UsersIdOwnedListsResponseToJSON,
    Get2UsersIdPinnedListsResponseFromJSON,
    Get2UsersIdPinnedListsResponseToJSON,
    ListAddUserRequestFromJSON,
    ListAddUserRequestToJSON,
    ListCreateRequestFromJSON,
    ListCreateRequestToJSON,
    ListCreateResponseFromJSON,
    ListCreateResponseToJSON,
    ListDeleteResponseFromJSON,
    ListDeleteResponseToJSON,
    ListFollowedRequestFromJSON,
    ListFollowedRequestToJSON,
    ListFollowedResponseFromJSON,
    ListFollowedResponseToJSON,
    ListMutateResponseFromJSON,
    ListMutateResponseToJSON,
    ListPinnedRequestFromJSON,
    ListPinnedRequestToJSON,
    ListPinnedResponseFromJSON,
    ListPinnedResponseToJSON,
    ListUnpinResponseFromJSON,
    ListUnpinResponseToJSON,
    ListUpdateRequestFromJSON,
    ListUpdateRequestToJSON,
    ListUpdateResponseFromJSON,
    ListUpdateResponseToJSON,
    ProblemFromJSON,
    ProblemToJSON,
} from '../models';

export interface GetUserListMembershipsRequest {
    id: string;
    maxResults?: number;
    paginationToken?: string;
    listFields?: Set<GetUserListMembershipsListFieldsEnum>;
    expansions?: Set<GetUserListMembershipsExpansionsEnum>;
    userFields?: Set<GetUserListMembershipsUserFieldsEnum>;
}

export interface ListAddMemberRequest {
    id: string;
    listAddUserRequest?: ListAddUserRequest;
}

export interface ListIdCreateRequest {
    listCreateRequest?: ListCreateRequest;
}

export interface ListIdDeleteRequest {
    id: string;
}

export interface ListIdGetRequest {
    id: string;
    listFields?: Set<ListIdGetListFieldsEnum>;
    expansions?: Set<ListIdGetExpansionsEnum>;
    userFields?: Set<ListIdGetUserFieldsEnum>;
}

export interface ListIdUpdateRequest {
    id: string;
    listUpdateRequest?: ListUpdateRequest;
}

export interface ListRemoveMemberRequest {
    id: string;
    userId: string;
}

export interface ListUserFollowRequest {
    id: string;
    listFollowedRequest?: ListFollowedRequest;
}

export interface ListUserOwnedListsRequest {
    id: string;
    maxResults?: number;
    paginationToken?: string;
    listFields?: Set<ListUserOwnedListsListFieldsEnum>;
    expansions?: Set<ListUserOwnedListsExpansionsEnum>;
    userFields?: Set<ListUserOwnedListsUserFieldsEnum>;
}

export interface ListUserPinRequest {
    id: string;
    listPinnedRequest: ListPinnedRequest;
}

export interface ListUserPinnedListsRequest {
    id: string;
    listFields?: Set<ListUserPinnedListsListFieldsEnum>;
    expansions?: Set<ListUserPinnedListsExpansionsEnum>;
    userFields?: Set<ListUserPinnedListsUserFieldsEnum>;
}

export interface ListUserUnfollowRequest {
    id: string;
    listId: string;
}

export interface ListUserUnpinRequest {
    id: string;
    listId: string;
}

export interface UserFollowedListsRequest {
    id: string;
    maxResults?: number;
    paginationToken?: string;
    listFields?: Set<UserFollowedListsListFieldsEnum>;
    expansions?: Set<UserFollowedListsExpansionsEnum>;
    userFields?: Set<UserFollowedListsUserFieldsEnum>;
}

/**
 * 
 */
export class ListsApi extends runtime.BaseAPI {

    /**
     * Get a User\'s List Memberships.
     * Get a User\'s List Memberships
     */
    async getUserListMembershipsRaw(requestParameters: GetUserListMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Get2UsersIdListMembershipsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserListMemberships.');
        }

        const queryParameters: any = {};

        if (requestParameters.maxResults !== undefined) {
            queryParameters['max_results'] = requestParameters.maxResults;
        }

        if (requestParameters.paginationToken !== undefined) {
            queryParameters['pagination_token'] = requestParameters.paginationToken;
        }

        if (requestParameters.listFields) {
            queryParameters['list.fields'] = Array.from(requestParameters.listFields).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.expansions) {
            queryParameters['expansions'] = Array.from(requestParameters.expansions).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.userFields) {
            queryParameters['user.fields'] = Array.from(requestParameters.userFields).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2UserToken", ["users.read", "tweet.read", "list.read"]);
        }

        const response = await this.request({
            path: `/2/users/{id}/list_memberships`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Get2UsersIdListMembershipsResponseFromJSON(jsonValue));
    }

    /**
     * Get a User\'s List Memberships.
     * Get a User\'s List Memberships
     */
    async getUserListMemberships(requestParameters: GetUserListMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Get2UsersIdListMembershipsResponse> {
        const response = await this.getUserListMembershipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Causes a User to become a member of a List.
     * Add a List member
     */
    async listAddMemberRaw(requestParameters: ListAddMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListMutateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listAddMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2UserToken", ["users.read", "tweet.read", "list.write"]);
        }

        const response = await this.request({
            path: `/2/lists/{id}/members`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListAddUserRequestToJSON(requestParameters.listAddUserRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListMutateResponseFromJSON(jsonValue));
    }

    /**
     * Causes a User to become a member of a List.
     * Add a List member
     */
    async listAddMember(requestParameters: ListAddMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListMutateResponse> {
        const response = await this.listAddMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new List.
     * Create List
     */
    async listIdCreateRaw(requestParameters: ListIdCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListCreateResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2UserToken", ["users.read", "tweet.read", "list.write", "list.read"]);
        }

        const response = await this.request({
            path: `/2/lists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListCreateRequestToJSON(requestParameters.listCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCreateResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new List.
     * Create List
     */
    async listIdCreate(requestParameters: ListIdCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListCreateResponse> {
        const response = await this.listIdCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a List that you own.
     * Delete List
     */
    async listIdDeleteRaw(requestParameters: ListIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListDeleteResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2UserToken", ["users.read", "tweet.read", "list.write"]);
        }

        const response = await this.request({
            path: `/2/lists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Delete a List that you own.
     * Delete List
     */
    async listIdDelete(requestParameters: ListIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListDeleteResponse> {
        const response = await this.listIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a List.
     * List lookup by List ID.
     */
    async listIdGetRaw(requestParameters: ListIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Get2ListsIdResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.listFields) {
            queryParameters['list.fields'] = Array.from(requestParameters.listFields).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.expansions) {
            queryParameters['expansions'] = Array.from(requestParameters.expansions).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.userFields) {
            queryParameters['user.fields'] = Array.from(requestParameters.userFields).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2UserToken", ["users.read", "tweet.read", "list.read"]);
        }

        const response = await this.request({
            path: `/2/lists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Get2ListsIdResponseFromJSON(jsonValue));
    }

    /**
     * Returns a List.
     * List lookup by List ID.
     */
    async listIdGet(requestParameters: ListIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Get2ListsIdResponse> {
        const response = await this.listIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a List that you own.
     * Update List.
     */
    async listIdUpdateRaw(requestParameters: ListIdUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListUpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listIdUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2UserToken", ["users.read", "tweet.read", "list.write"]);
        }

        const response = await this.request({
            path: `/2/lists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ListUpdateRequestToJSON(requestParameters.listUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Update a List that you own.
     * Update List.
     */
    async listIdUpdate(requestParameters: ListIdUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListUpdateResponse> {
        const response = await this.listIdUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Causes a User to be removed from the members of a List.
     * Remove a List member
     */
    async listRemoveMemberRaw(requestParameters: ListRemoveMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListMutateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listRemoveMember.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling listRemoveMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2UserToken", ["users.read", "tweet.read", "list.write"]);
        }

        const response = await this.request({
            path: `/2/lists/{id}/members/{user_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListMutateResponseFromJSON(jsonValue));
    }

    /**
     * Causes a User to be removed from the members of a List.
     * Remove a List member
     */
    async listRemoveMember(requestParameters: ListRemoveMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListMutateResponse> {
        const response = await this.listRemoveMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Causes a User to follow a List.
     * Follow a List
     */
    async listUserFollowRaw(requestParameters: ListUserFollowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFollowedResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listUserFollow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2UserToken", ["users.read", "tweet.read", "list.write"]);
        }

        const response = await this.request({
            path: `/2/users/{id}/followed_lists`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListFollowedRequestToJSON(requestParameters.listFollowedRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFollowedResponseFromJSON(jsonValue));
    }

    /**
     * Causes a User to follow a List.
     * Follow a List
     */
    async listUserFollow(requestParameters: ListUserFollowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFollowedResponse> {
        const response = await this.listUserFollowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a User\'s Owned Lists.
     * Get a User\'s Owned Lists.
     */
    async listUserOwnedListsRaw(requestParameters: ListUserOwnedListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Get2UsersIdOwnedListsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listUserOwnedLists.');
        }

        const queryParameters: any = {};

        if (requestParameters.maxResults !== undefined) {
            queryParameters['max_results'] = requestParameters.maxResults;
        }

        if (requestParameters.paginationToken !== undefined) {
            queryParameters['pagination_token'] = requestParameters.paginationToken;
        }

        if (requestParameters.listFields) {
            queryParameters['list.fields'] = Array.from(requestParameters.listFields).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.expansions) {
            queryParameters['expansions'] = Array.from(requestParameters.expansions).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.userFields) {
            queryParameters['user.fields'] = Array.from(requestParameters.userFields).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2UserToken", ["users.read", "tweet.read", "list.read"]);
        }

        const response = await this.request({
            path: `/2/users/{id}/owned_lists`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Get2UsersIdOwnedListsResponseFromJSON(jsonValue));
    }

    /**
     * Get a User\'s Owned Lists.
     * Get a User\'s Owned Lists.
     */
    async listUserOwnedLists(requestParameters: ListUserOwnedListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Get2UsersIdOwnedListsResponse> {
        const response = await this.listUserOwnedListsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Causes a User to pin a List.
     * Pin a List
     */
    async listUserPinRaw(requestParameters: ListUserPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPinnedResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listUserPin.');
        }

        if (requestParameters.listPinnedRequest === null || requestParameters.listPinnedRequest === undefined) {
            throw new runtime.RequiredError('listPinnedRequest','Required parameter requestParameters.listPinnedRequest was null or undefined when calling listUserPin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2UserToken", ["users.read", "tweet.read", "list.write"]);
        }

        const response = await this.request({
            path: `/2/users/{id}/pinned_lists`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListPinnedRequestToJSON(requestParameters.listPinnedRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPinnedResponseFromJSON(jsonValue));
    }

    /**
     * Causes a User to pin a List.
     * Pin a List
     */
    async listUserPin(requestParameters: ListUserPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPinnedResponse> {
        const response = await this.listUserPinRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a User\'s Pinned Lists.
     * Get a User\'s Pinned Lists
     */
    async listUserPinnedListsRaw(requestParameters: ListUserPinnedListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Get2UsersIdPinnedListsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listUserPinnedLists.');
        }

        const queryParameters: any = {};

        if (requestParameters.listFields) {
            queryParameters['list.fields'] = Array.from(requestParameters.listFields).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.expansions) {
            queryParameters['expansions'] = Array.from(requestParameters.expansions).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.userFields) {
            queryParameters['user.fields'] = Array.from(requestParameters.userFields).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2UserToken", ["users.read", "tweet.read", "list.read"]);
        }

        const response = await this.request({
            path: `/2/users/{id}/pinned_lists`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Get2UsersIdPinnedListsResponseFromJSON(jsonValue));
    }

    /**
     * Get a User\'s Pinned Lists.
     * Get a User\'s Pinned Lists
     */
    async listUserPinnedLists(requestParameters: ListUserPinnedListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Get2UsersIdPinnedListsResponse> {
        const response = await this.listUserPinnedListsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Causes a User to unfollow a List.
     * Unfollow a List
     */
    async listUserUnfollowRaw(requestParameters: ListUserUnfollowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFollowedResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listUserUnfollow.');
        }

        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling listUserUnfollow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2UserToken", ["users.read", "tweet.read", "list.write"]);
        }

        const response = await this.request({
            path: `/2/users/{id}/followed_lists/{list_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"list_id"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFollowedResponseFromJSON(jsonValue));
    }

    /**
     * Causes a User to unfollow a List.
     * Unfollow a List
     */
    async listUserUnfollow(requestParameters: ListUserUnfollowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFollowedResponse> {
        const response = await this.listUserUnfollowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Causes a User to remove a pinned List.
     * Unpin a List
     */
    async listUserUnpinRaw(requestParameters: ListUserUnpinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListUnpinResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listUserUnpin.');
        }

        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling listUserUnpin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2UserToken", ["users.read", "tweet.read", "list.write"]);
        }

        const response = await this.request({
            path: `/2/users/{id}/pinned_lists/{list_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"list_id"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListUnpinResponseFromJSON(jsonValue));
    }

    /**
     * Causes a User to remove a pinned List.
     * Unpin a List
     */
    async listUserUnpin(requestParameters: ListUserUnpinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListUnpinResponse> {
        const response = await this.listUserUnpinRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a User\'s followed Lists.
     * Get User\'s Followed Lists
     */
    async userFollowedListsRaw(requestParameters: UserFollowedListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Get2UsersIdFollowedListsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userFollowedLists.');
        }

        const queryParameters: any = {};

        if (requestParameters.maxResults !== undefined) {
            queryParameters['max_results'] = requestParameters.maxResults;
        }

        if (requestParameters.paginationToken !== undefined) {
            queryParameters['pagination_token'] = requestParameters.paginationToken;
        }

        if (requestParameters.listFields) {
            queryParameters['list.fields'] = Array.from(requestParameters.listFields).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.expansions) {
            queryParameters['expansions'] = Array.from(requestParameters.expansions).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.userFields) {
            queryParameters['user.fields'] = Array.from(requestParameters.userFields).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2UserToken", ["users.read", "tweet.read", "list.read"]);
        }

        const response = await this.request({
            path: `/2/users/{id}/followed_lists`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Get2UsersIdFollowedListsResponseFromJSON(jsonValue));
    }

    /**
     * Returns a User\'s followed Lists.
     * Get User\'s Followed Lists
     */
    async userFollowedLists(requestParameters: UserFollowedListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Get2UsersIdFollowedListsResponse> {
        const response = await this.userFollowedListsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetUserListMembershipsListFieldsEnum = {
    CreatedAt: 'created_at',
    Description: 'description',
    FollowerCount: 'follower_count',
    Id: 'id',
    MemberCount: 'member_count',
    Name: 'name',
    OwnerId: 'owner_id',
    Private: 'private'
} as const;
export type GetUserListMembershipsListFieldsEnum = typeof GetUserListMembershipsListFieldsEnum[keyof typeof GetUserListMembershipsListFieldsEnum];
/**
 * @export
 */
export const GetUserListMembershipsExpansionsEnum = {
    OwnerId: 'owner_id'
} as const;
export type GetUserListMembershipsExpansionsEnum = typeof GetUserListMembershipsExpansionsEnum[keyof typeof GetUserListMembershipsExpansionsEnum];
/**
 * @export
 */
export const GetUserListMembershipsUserFieldsEnum = {
    CreatedAt: 'created_at',
    Description: 'description',
    Entities: 'entities',
    Id: 'id',
    Location: 'location',
    Name: 'name',
    PinnedTweetId: 'pinned_tweet_id',
    ProfileImageUrl: 'profile_image_url',
    Protected: 'protected',
    PublicMetrics: 'public_metrics',
    Url: 'url',
    Username: 'username',
    Verified: 'verified',
    Withheld: 'withheld'
} as const;
export type GetUserListMembershipsUserFieldsEnum = typeof GetUserListMembershipsUserFieldsEnum[keyof typeof GetUserListMembershipsUserFieldsEnum];
/**
 * @export
 */
export const ListIdGetListFieldsEnum = {
    CreatedAt: 'created_at',
    Description: 'description',
    FollowerCount: 'follower_count',
    Id: 'id',
    MemberCount: 'member_count',
    Name: 'name',
    OwnerId: 'owner_id',
    Private: 'private'
} as const;
export type ListIdGetListFieldsEnum = typeof ListIdGetListFieldsEnum[keyof typeof ListIdGetListFieldsEnum];
/**
 * @export
 */
export const ListIdGetExpansionsEnum = {
    OwnerId: 'owner_id'
} as const;
export type ListIdGetExpansionsEnum = typeof ListIdGetExpansionsEnum[keyof typeof ListIdGetExpansionsEnum];
/**
 * @export
 */
export const ListIdGetUserFieldsEnum = {
    CreatedAt: 'created_at',
    Description: 'description',
    Entities: 'entities',
    Id: 'id',
    Location: 'location',
    Name: 'name',
    PinnedTweetId: 'pinned_tweet_id',
    ProfileImageUrl: 'profile_image_url',
    Protected: 'protected',
    PublicMetrics: 'public_metrics',
    Url: 'url',
    Username: 'username',
    Verified: 'verified',
    Withheld: 'withheld'
} as const;
export type ListIdGetUserFieldsEnum = typeof ListIdGetUserFieldsEnum[keyof typeof ListIdGetUserFieldsEnum];
/**
 * @export
 */
export const ListUserOwnedListsListFieldsEnum = {
    CreatedAt: 'created_at',
    Description: 'description',
    FollowerCount: 'follower_count',
    Id: 'id',
    MemberCount: 'member_count',
    Name: 'name',
    OwnerId: 'owner_id',
    Private: 'private'
} as const;
export type ListUserOwnedListsListFieldsEnum = typeof ListUserOwnedListsListFieldsEnum[keyof typeof ListUserOwnedListsListFieldsEnum];
/**
 * @export
 */
export const ListUserOwnedListsExpansionsEnum = {
    OwnerId: 'owner_id'
} as const;
export type ListUserOwnedListsExpansionsEnum = typeof ListUserOwnedListsExpansionsEnum[keyof typeof ListUserOwnedListsExpansionsEnum];
/**
 * @export
 */
export const ListUserOwnedListsUserFieldsEnum = {
    CreatedAt: 'created_at',
    Description: 'description',
    Entities: 'entities',
    Id: 'id',
    Location: 'location',
    Name: 'name',
    PinnedTweetId: 'pinned_tweet_id',
    ProfileImageUrl: 'profile_image_url',
    Protected: 'protected',
    PublicMetrics: 'public_metrics',
    Url: 'url',
    Username: 'username',
    Verified: 'verified',
    Withheld: 'withheld'
} as const;
export type ListUserOwnedListsUserFieldsEnum = typeof ListUserOwnedListsUserFieldsEnum[keyof typeof ListUserOwnedListsUserFieldsEnum];
/**
 * @export
 */
export const ListUserPinnedListsListFieldsEnum = {
    CreatedAt: 'created_at',
    Description: 'description',
    FollowerCount: 'follower_count',
    Id: 'id',
    MemberCount: 'member_count',
    Name: 'name',
    OwnerId: 'owner_id',
    Private: 'private'
} as const;
export type ListUserPinnedListsListFieldsEnum = typeof ListUserPinnedListsListFieldsEnum[keyof typeof ListUserPinnedListsListFieldsEnum];
/**
 * @export
 */
export const ListUserPinnedListsExpansionsEnum = {
    OwnerId: 'owner_id'
} as const;
export type ListUserPinnedListsExpansionsEnum = typeof ListUserPinnedListsExpansionsEnum[keyof typeof ListUserPinnedListsExpansionsEnum];
/**
 * @export
 */
export const ListUserPinnedListsUserFieldsEnum = {
    CreatedAt: 'created_at',
    Description: 'description',
    Entities: 'entities',
    Id: 'id',
    Location: 'location',
    Name: 'name',
    PinnedTweetId: 'pinned_tweet_id',
    ProfileImageUrl: 'profile_image_url',
    Protected: 'protected',
    PublicMetrics: 'public_metrics',
    Url: 'url',
    Username: 'username',
    Verified: 'verified',
    Withheld: 'withheld'
} as const;
export type ListUserPinnedListsUserFieldsEnum = typeof ListUserPinnedListsUserFieldsEnum[keyof typeof ListUserPinnedListsUserFieldsEnum];
/**
 * @export
 */
export const UserFollowedListsListFieldsEnum = {
    CreatedAt: 'created_at',
    Description: 'description',
    FollowerCount: 'follower_count',
    Id: 'id',
    MemberCount: 'member_count',
    Name: 'name',
    OwnerId: 'owner_id',
    Private: 'private'
} as const;
export type UserFollowedListsListFieldsEnum = typeof UserFollowedListsListFieldsEnum[keyof typeof UserFollowedListsListFieldsEnum];
/**
 * @export
 */
export const UserFollowedListsExpansionsEnum = {
    OwnerId: 'owner_id'
} as const;
export type UserFollowedListsExpansionsEnum = typeof UserFollowedListsExpansionsEnum[keyof typeof UserFollowedListsExpansionsEnum];
/**
 * @export
 */
export const UserFollowedListsUserFieldsEnum = {
    CreatedAt: 'created_at',
    Description: 'description',
    Entities: 'entities',
    Id: 'id',
    Location: 'location',
    Name: 'name',
    PinnedTweetId: 'pinned_tweet_id',
    ProfileImageUrl: 'profile_image_url',
    Protected: 'protected',
    PublicMetrics: 'public_metrics',
    Url: 'url',
    Username: 'username',
    Verified: 'verified',
    Withheld: 'withheld'
} as const;
export type UserFollowedListsUserFieldsEnum = typeof UserFollowedListsUserFieldsEnum[keyof typeof UserFollowedListsUserFieldsEnum];
