/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EntityIndicesInclusiveExclusive } from './EntityIndicesInclusiveExclusive';
import {
    EntityIndicesInclusiveExclusiveFromJSON,
    EntityIndicesInclusiveExclusiveFromJSONTyped,
    EntityIndicesInclusiveExclusiveToJSON,
} from './EntityIndicesInclusiveExclusive';
import type { MentionFields } from './MentionFields';
import {
    MentionFieldsFromJSON,
    MentionFieldsFromJSONTyped,
    MentionFieldsToJSON,
} from './MentionFields';

/**
 * 
 * @export
 * @interface MentionEntity
 */
export interface MentionEntity {
    /**
     * Index (zero-based) at which position this entity ends.  The index is exclusive.
     * @type {number}
     * @memberof MentionEntity
     */
    end: number;
    /**
     * Index (zero-based) at which position this entity starts.  The index is inclusive.
     * @type {number}
     * @memberof MentionEntity
     */
    start: number;
    /**
     * Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
     * @type {string}
     * @memberof MentionEntity
     */
    id?: string;
    /**
     * The Twitter handle (screen name) of this user.
     * @type {string}
     * @memberof MentionEntity
     */
    username: string;
}

/**
 * Check if a given object implements the MentionEntity interface.
 */
export function instanceOfMentionEntity(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "end" in value;
    isInstance = isInstance && "start" in value;
    isInstance = isInstance && "username" in value;

    return isInstance;
}

export function MentionEntityFromJSON(json: any): MentionEntity {
    return MentionEntityFromJSONTyped(json, false);
}

export function MentionEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): MentionEntity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'end': json['end'],
        'start': json['start'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'username': json['username'],
    };
}

export function MentionEntityToJSON(value?: MentionEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'end': value.end,
        'start': value.start,
        'id': value.id,
        'username': value.username,
    };
}

