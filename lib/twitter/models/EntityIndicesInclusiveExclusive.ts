/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represent a boundary range (start and end index) for a recognized entity (for example a hashtag or a mention). `start` must be smaller than `end`.  The start index is inclusive, the end index is exclusive.
 * @export
 * @interface EntityIndicesInclusiveExclusive
 */
export interface EntityIndicesInclusiveExclusive {
    /**
     * Index (zero-based) at which position this entity ends.  The index is exclusive.
     * @type {number}
     * @memberof EntityIndicesInclusiveExclusive
     */
    end: number;
    /**
     * Index (zero-based) at which position this entity starts.  The index is inclusive.
     * @type {number}
     * @memberof EntityIndicesInclusiveExclusive
     */
    start: number;
}

/**
 * Check if a given object implements the EntityIndicesInclusiveExclusive interface.
 */
export function instanceOfEntityIndicesInclusiveExclusive(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "end" in value;
    isInstance = isInstance && "start" in value;

    return isInstance;
}

export function EntityIndicesInclusiveExclusiveFromJSON(json: any): EntityIndicesInclusiveExclusive {
    return EntityIndicesInclusiveExclusiveFromJSONTyped(json, false);
}

export function EntityIndicesInclusiveExclusiveFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityIndicesInclusiveExclusive {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'end': json['end'],
        'start': json['start'],
    };
}

export function EntityIndicesInclusiveExclusiveToJSON(value?: EntityIndicesInclusiveExclusive | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'end': value.end,
        'start': value.start,
    };
}

