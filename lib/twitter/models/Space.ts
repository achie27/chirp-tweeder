/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SpaceTopicsInner } from './SpaceTopicsInner';
import {
    SpaceTopicsInnerFromJSON,
    SpaceTopicsInnerFromJSONTyped,
    SpaceTopicsInnerToJSON,
} from './SpaceTopicsInner';

/**
 * 
 * @export
 * @interface Space
 */
export interface Space {
    /**
     * Creation time of the Space.
     * @type {Date}
     * @memberof Space
     */
    createdAt?: Date;
    /**
     * Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
     * @type {string}
     * @memberof Space
     */
    creatorId?: string;
    /**
     * End time of the Space.
     * @type {Date}
     * @memberof Space
     */
    endedAt?: Date;
    /**
     * The user ids for the hosts of the Space.
     * @type {Array<string>}
     * @memberof Space
     */
    hostIds?: Array<string>;
    /**
     * The unique identifier of this Space.
     * @type {string}
     * @memberof Space
     */
    id: string;
    /**
     * An array of user ids for people who were invited to a Space.
     * @type {Array<string>}
     * @memberof Space
     */
    invitedUserIds?: Array<string>;
    /**
     * Denotes if the Space is a ticketed Space.
     * @type {boolean}
     * @memberof Space
     */
    isTicketed?: boolean;
    /**
     * The language of the Space.
     * @type {string}
     * @memberof Space
     */
    lang?: string;
    /**
     * The number of participants in a Space.
     * @type {number}
     * @memberof Space
     */
    participantCount?: number;
    /**
     * A date time stamp for when a Space is scheduled to begin.
     * @type {Date}
     * @memberof Space
     */
    scheduledStart?: Date;
    /**
     * An array of user ids for people who were speakers in a Space.
     * @type {Array<string>}
     * @memberof Space
     */
    speakerIds?: Array<string>;
    /**
     * When the Space was started as a date string.
     * @type {Date}
     * @memberof Space
     */
    startedAt?: Date;
    /**
     * The current state of the Space.
     * @type {string}
     * @memberof Space
     */
    state: SpaceStateEnum;
    /**
     * The number of people who have either purchased a ticket or set a reminder for this Space.
     * @type {number}
     * @memberof Space
     */
    subscriberCount?: number;
    /**
     * The title of the Space.
     * @type {string}
     * @memberof Space
     */
    title?: string;
    /**
     * The topics of a Space, as selected by its creator.
     * @type {Array<SpaceTopicsInner>}
     * @memberof Space
     */
    topics?: Array<SpaceTopicsInner>;
    /**
     * When the Space was last updated.
     * @type {Date}
     * @memberof Space
     */
    updatedAt?: Date;
}


/**
 * @export
 */
export const SpaceStateEnum = {
    Live: 'live',
    Scheduled: 'scheduled',
    Ended: 'ended'
} as const;
export type SpaceStateEnum = typeof SpaceStateEnum[keyof typeof SpaceStateEnum];


/**
 * Check if a given object implements the Space interface.
 */
export function instanceOfSpace(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "state" in value;

    return isInstance;
}

export function SpaceFromJSON(json: any): Space {
    return SpaceFromJSONTyped(json, false);
}

export function SpaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Space {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'creatorId': !exists(json, 'creator_id') ? undefined : json['creator_id'],
        'endedAt': !exists(json, 'ended_at') ? undefined : (new Date(json['ended_at'])),
        'hostIds': !exists(json, 'host_ids') ? undefined : json['host_ids'],
        'id': json['id'],
        'invitedUserIds': !exists(json, 'invited_user_ids') ? undefined : json['invited_user_ids'],
        'isTicketed': !exists(json, 'is_ticketed') ? undefined : json['is_ticketed'],
        'lang': !exists(json, 'lang') ? undefined : json['lang'],
        'participantCount': !exists(json, 'participant_count') ? undefined : json['participant_count'],
        'scheduledStart': !exists(json, 'scheduled_start') ? undefined : (new Date(json['scheduled_start'])),
        'speakerIds': !exists(json, 'speaker_ids') ? undefined : json['speaker_ids'],
        'startedAt': !exists(json, 'started_at') ? undefined : (new Date(json['started_at'])),
        'state': json['state'],
        'subscriberCount': !exists(json, 'subscriber_count') ? undefined : json['subscriber_count'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'topics': !exists(json, 'topics') ? undefined : ((json['topics'] as Array<any>).map(SpaceTopicsInnerFromJSON)),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
    };
}

export function SpaceToJSON(value?: Space | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'creator_id': value.creatorId,
        'ended_at': value.endedAt === undefined ? undefined : (value.endedAt.toISOString()),
        'host_ids': value.hostIds,
        'id': value.id,
        'invited_user_ids': value.invitedUserIds,
        'is_ticketed': value.isTicketed,
        'lang': value.lang,
        'participant_count': value.participantCount,
        'scheduled_start': value.scheduledStart === undefined ? undefined : (value.scheduledStart.toISOString()),
        'speaker_ids': value.speakerIds,
        'started_at': value.startedAt === undefined ? undefined : (value.startedAt.toISOString()),
        'state': value.state,
        'subscriber_count': value.subscriberCount,
        'title': value.title,
        'topics': value.topics === undefined ? undefined : ((value.topics as Array<any>).map(SpaceTopicsInnerToJSON)),
        'updated_at': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

