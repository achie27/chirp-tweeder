/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Indicates withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).
 * @export
 * @interface UserWithheld
 */
export interface UserWithheld {
    /**
     * Provides a list of countries where this content is not available.
     * @type {Set<string>}
     * @memberof UserWithheld
     */
    countryCodes: Set<string>;
    /**
     * Indicates that the content being withheld is a `user`.
     * @type {string}
     * @memberof UserWithheld
     */
    scope?: UserWithheldScopeEnum;
}


/**
 * @export
 */
export const UserWithheldScopeEnum = {
    User: 'user'
} as const;
export type UserWithheldScopeEnum = typeof UserWithheldScopeEnum[keyof typeof UserWithheldScopeEnum];


/**
 * Check if a given object implements the UserWithheld interface.
 */
export function instanceOfUserWithheld(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "countryCodes" in value;

    return isInstance;
}

export function UserWithheldFromJSON(json: any): UserWithheld {
    return UserWithheldFromJSONTyped(json, false);
}

export function UserWithheldFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserWithheld {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'countryCodes': json['country_codes'],
        'scope': !exists(json, 'scope') ? undefined : json['scope'],
    };
}

export function UserWithheldToJSON(value?: UserWithheld | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'country_codes': value.countryCodes,
        'scope': value.scope,
    };
}

