/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TweetComplianceSchemaTweet } from './TweetComplianceSchemaTweet';
import {
    TweetComplianceSchemaTweetFromJSON,
    TweetComplianceSchemaTweetFromJSONTyped,
    TweetComplianceSchemaTweetToJSON,
} from './TweetComplianceSchemaTweet';

/**
 * 
 * @export
 * @interface TweetTakedownComplianceSchema
 */
export interface TweetTakedownComplianceSchema {
    /**
     * Event time.
     * @type {Date}
     * @memberof TweetTakedownComplianceSchema
     */
    eventAt: Date;
    /**
     * Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
     * @type {string}
     * @memberof TweetTakedownComplianceSchema
     */
    quoteTweetId?: string;
    /**
     * 
     * @type {TweetComplianceSchemaTweet}
     * @memberof TweetTakedownComplianceSchema
     */
    tweet: TweetComplianceSchemaTweet;
    /**
     * 
     * @type {Array<string>}
     * @memberof TweetTakedownComplianceSchema
     */
    withheldInCountries: Array<string>;
}

/**
 * Check if a given object implements the TweetTakedownComplianceSchema interface.
 */
export function instanceOfTweetTakedownComplianceSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "eventAt" in value;
    isInstance = isInstance && "tweet" in value;
    isInstance = isInstance && "withheldInCountries" in value;

    return isInstance;
}

export function TweetTakedownComplianceSchemaFromJSON(json: any): TweetTakedownComplianceSchema {
    return TweetTakedownComplianceSchemaFromJSONTyped(json, false);
}

export function TweetTakedownComplianceSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): TweetTakedownComplianceSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventAt': (new Date(json['event_at'])),
        'quoteTweetId': !exists(json, 'quote_tweet_id') ? undefined : json['quote_tweet_id'],
        'tweet': TweetComplianceSchemaTweetFromJSON(json['tweet']),
        'withheldInCountries': json['withheld_in_countries'],
    };
}

export function TweetTakedownComplianceSchemaToJSON(value?: TweetTakedownComplianceSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'event_at': (value.eventAt.toISOString()),
        'quote_tweet_id': value.quoteTweetId,
        'tweet': TweetComplianceSchemaTweetToJSON(value.tweet),
        'withheld_in_countries': value.withheldInCountries,
    };
}

