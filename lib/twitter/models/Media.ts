/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
     AnimatedGifFromJSONTyped,
     PhotoFromJSONTyped,
     VideoFromJSONTyped
} from './';

/**
 * 
 * @export
 * @interface Media
 */
export interface Media {
    /**
     * The height of the media in pixels.
     * @type {number}
     * @memberof Media
     */
    height?: number;
    /**
     * The Media Key identifier for this attachment.
     * @type {string}
     * @memberof Media
     */
    mediaKey?: string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    type: string;
    /**
     * The width of the media in pixels.
     * @type {number}
     * @memberof Media
     */
    width?: number;
}

/**
 * Check if a given object implements the Media interface.
 */
export function instanceOfMedia(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function MediaFromJSON(json: any): Media {
    return MediaFromJSONTyped(json, false);
}

export function MediaFromJSONTyped(json: any, ignoreDiscriminator: boolean): Media {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'animated_gif') {
            return AnimatedGifFromJSONTyped(json, true);
        }
        if (json['type'] === 'photo') {
            return PhotoFromJSONTyped(json, true);
        }
        if (json['type'] === 'video') {
            return VideoFromJSONTyped(json, true);
        }
    }
    return {
        
        'height': !exists(json, 'height') ? undefined : json['height'],
        'mediaKey': !exists(json, 'media_key') ? undefined : json['media_key'],
        'type': json['type'],
        'width': !exists(json, 'width') ? undefined : json['width'],
    };
}

export function MediaToJSON(value?: Media | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'height': value.height,
        'media_key': value.mediaKey,
        'type': value.type,
        'width': value.width,
    };
}

