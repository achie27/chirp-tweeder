/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EntityIndicesInclusiveExclusive } from './EntityIndicesInclusiveExclusive';
import {
    EntityIndicesInclusiveExclusiveFromJSON,
    EntityIndicesInclusiveExclusiveFromJSONTyped,
    EntityIndicesInclusiveExclusiveToJSON,
} from './EntityIndicesInclusiveExclusive';
import type { UrlFields } from './UrlFields';
import {
    UrlFieldsFromJSON,
    UrlFieldsFromJSONTyped,
    UrlFieldsToJSON,
} from './UrlFields';
import type { UrlImage } from './UrlImage';
import {
    UrlImageFromJSON,
    UrlImageFromJSONTyped,
    UrlImageToJSON,
} from './UrlImage';

/**
 * Represent the portion of text recognized as a URL, and its start and end position within the text.
 * @export
 * @interface UrlEntity
 */
export interface UrlEntity {
    /**
     * Index (zero-based) at which position this entity ends.  The index is exclusive.
     * @type {number}
     * @memberof UrlEntity
     */
    end: number;
    /**
     * Index (zero-based) at which position this entity starts.  The index is inclusive.
     * @type {number}
     * @memberof UrlEntity
     */
    start: number;
    /**
     * Description of the URL landing page.
     * @type {string}
     * @memberof UrlEntity
     */
    description?: string;
    /**
     * The URL as displayed in the Twitter client.
     * @type {string}
     * @memberof UrlEntity
     */
    displayUrl?: string;
    /**
     * A validly formatted URL.
     * @type {string}
     * @memberof UrlEntity
     */
    expandedUrl?: string;
    /**
     * 
     * @type {Array<UrlImage>}
     * @memberof UrlEntity
     */
    images?: Array<UrlImage>;
    /**
     * The Media Key identifier for this attachment.
     * @type {string}
     * @memberof UrlEntity
     */
    mediaKey?: string;
    /**
     * HTTP Status Code.
     * @type {number}
     * @memberof UrlEntity
     */
    status?: number;
    /**
     * Title of the page the URL points to.
     * @type {string}
     * @memberof UrlEntity
     */
    title?: string;
    /**
     * Fully resolved url.
     * @type {string}
     * @memberof UrlEntity
     */
    unwoundUrl?: string;
    /**
     * A validly formatted URL.
     * @type {string}
     * @memberof UrlEntity
     */
    url: string;
}

/**
 * Check if a given object implements the UrlEntity interface.
 */
export function instanceOfUrlEntity(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "end" in value;
    isInstance = isInstance && "start" in value;
    isInstance = isInstance && "url" in value;

    return isInstance;
}

export function UrlEntityFromJSON(json: any): UrlEntity {
    return UrlEntityFromJSONTyped(json, false);
}

export function UrlEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): UrlEntity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'end': json['end'],
        'start': json['start'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'displayUrl': !exists(json, 'display_url') ? undefined : json['display_url'],
        'expandedUrl': !exists(json, 'expanded_url') ? undefined : json['expanded_url'],
        'images': !exists(json, 'images') ? undefined : ((json['images'] as Array<any>).map(UrlImageFromJSON)),
        'mediaKey': !exists(json, 'media_key') ? undefined : json['media_key'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'unwoundUrl': !exists(json, 'unwound_url') ? undefined : json['unwound_url'],
        'url': json['url'],
    };
}

export function UrlEntityToJSON(value?: UrlEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'end': value.end,
        'start': value.start,
        'description': value.description,
        'display_url': value.displayUrl,
        'expanded_url': value.expandedUrl,
        'images': value.images === undefined ? undefined : ((value.images as Array<any>).map(UrlImageToJSON)),
        'media_key': value.mediaKey,
        'status': value.status,
        'title': value.title,
        'unwound_url': value.unwoundUrl,
        'url': value.url,
    };
}

