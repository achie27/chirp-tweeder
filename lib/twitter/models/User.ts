/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserEntities } from './UserEntities';
import {
    UserEntitiesFromJSON,
    UserEntitiesFromJSONTyped,
    UserEntitiesToJSON,
} from './UserEntities';
import type { UserPublicMetrics } from './UserPublicMetrics';
import {
    UserPublicMetricsFromJSON,
    UserPublicMetricsFromJSONTyped,
    UserPublicMetricsToJSON,
} from './UserPublicMetrics';
import type { UserWithheld } from './UserWithheld';
import {
    UserWithheldFromJSON,
    UserWithheldFromJSONTyped,
    UserWithheldToJSON,
} from './UserWithheld';

/**
 * The Twitter User object.
 * @export
 * @interface User
 */
export interface User {
    /**
     * Creation time of this User.
     * @type {Date}
     * @memberof User
     */
    createdAt?: Date;
    /**
     * The text of this User's profile description (also known as bio), if the User provided one.
     * @type {string}
     * @memberof User
     */
    description?: string;
    /**
     * 
     * @type {UserEntities}
     * @memberof User
     */
    entities?: UserEntities;
    /**
     * Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * The location specified in the User's profile, if the User provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.
     * @type {string}
     * @memberof User
     */
    location?: string;
    /**
     * The friendly name of this User, as shown on their profile.
     * @type {string}
     * @memberof User
     */
    name: string;
    /**
     * Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
     * @type {string}
     * @memberof User
     */
    pinnedTweetId?: string;
    /**
     * The URL to the profile image for this User.
     * @type {string}
     * @memberof User
     */
    profileImageUrl?: string;
    /**
     * Indicates if this User has chosen to protect their Tweets (in other words, if this User's Tweets are private).
     * @type {boolean}
     * @memberof User
     */
    _protected?: boolean;
    /**
     * 
     * @type {UserPublicMetrics}
     * @memberof User
     */
    publicMetrics?: UserPublicMetrics;
    /**
     * The URL specified in the User's profile.
     * @type {string}
     * @memberof User
     */
    url?: string;
    /**
     * The Twitter handle (screen name) of this user.
     * @type {string}
     * @memberof User
     */
    username: string;
    /**
     * Indicate if this User is a verified Twitter User.
     * @type {boolean}
     * @memberof User
     */
    verified?: boolean;
    /**
     * 
     * @type {UserWithheld}
     * @memberof User
     */
    withheld?: UserWithheld;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "username" in value;

    return isInstance;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'entities': !exists(json, 'entities') ? undefined : UserEntitiesFromJSON(json['entities']),
        'id': json['id'],
        'location': !exists(json, 'location') ? undefined : json['location'],
        'name': json['name'],
        'pinnedTweetId': !exists(json, 'pinned_tweet_id') ? undefined : json['pinned_tweet_id'],
        'profileImageUrl': !exists(json, 'profile_image_url') ? undefined : json['profile_image_url'],
        '_protected': !exists(json, 'protected') ? undefined : json['protected'],
        'publicMetrics': !exists(json, 'public_metrics') ? undefined : UserPublicMetricsFromJSON(json['public_metrics']),
        'url': !exists(json, 'url') ? undefined : json['url'],
        'username': json['username'],
        'verified': !exists(json, 'verified') ? undefined : json['verified'],
        'withheld': !exists(json, 'withheld') ? undefined : UserWithheldFromJSON(json['withheld']),
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'description': value.description,
        'entities': UserEntitiesToJSON(value.entities),
        'id': value.id,
        'location': value.location,
        'name': value.name,
        'pinned_tweet_id': value.pinnedTweetId,
        'profile_image_url': value.profileImageUrl,
        'protected': value._protected,
        'public_metrics': UserPublicMetricsToJSON(value.publicMetrics),
        'url': value.url,
        'username': value.username,
        'verified': value.verified,
        'withheld': UserWithheldToJSON(value.withheld),
    };
}

