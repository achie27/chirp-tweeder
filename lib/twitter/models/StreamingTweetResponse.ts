/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Expansions } from './Expansions';
import {
    ExpansionsFromJSON,
    ExpansionsFromJSONTyped,
    ExpansionsToJSON,
} from './Expansions';
import type { Problem } from './Problem';
import {
    ProblemFromJSON,
    ProblemFromJSONTyped,
    ProblemToJSON,
} from './Problem';
import type { Tweet } from './Tweet';
import {
    TweetFromJSON,
    TweetFromJSONTyped,
    TweetToJSON,
} from './Tweet';

/**
 * 
 * @export
 * @interface StreamingTweetResponse
 */
export interface StreamingTweetResponse {
    /**
     * 
     * @type {Tweet}
     * @memberof StreamingTweetResponse
     */
    data?: Tweet;
    /**
     * 
     * @type {Array<Problem>}
     * @memberof StreamingTweetResponse
     */
    errors?: Array<Problem>;
    /**
     * 
     * @type {Expansions}
     * @memberof StreamingTweetResponse
     */
    includes?: Expansions;
}

/**
 * Check if a given object implements the StreamingTweetResponse interface.
 */
export function instanceOfStreamingTweetResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StreamingTweetResponseFromJSON(json: any): StreamingTweetResponse {
    return StreamingTweetResponseFromJSONTyped(json, false);
}

export function StreamingTweetResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamingTweetResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': !exists(json, 'data') ? undefined : TweetFromJSON(json['data']),
        'errors': !exists(json, 'errors') ? undefined : ((json['errors'] as Array<any>).map(ProblemFromJSON)),
        'includes': !exists(json, 'includes') ? undefined : ExpansionsFromJSON(json['includes']),
    };
}

export function StreamingTweetResponseToJSON(value?: StreamingTweetResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': TweetToJSON(value.data),
        'errors': value.errors === undefined ? undefined : ((value.errors as Array<any>).map(ProblemToJSON)),
        'includes': ExpansionsToJSON(value.includes),
    };
}

