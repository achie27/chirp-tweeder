/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Geo } from './Geo';
import {
    GeoFromJSON,
    GeoFromJSONTyped,
    GeoToJSON,
} from './Geo';
import type { PlaceType } from './PlaceType';
import {
    PlaceTypeFromJSON,
    PlaceTypeFromJSONTyped,
    PlaceTypeToJSON,
} from './PlaceType';

/**
 * 
 * @export
 * @interface Place
 */
export interface Place {
    /**
     * 
     * @type {Array<string>}
     * @memberof Place
     */
    containedWithin?: Array<string>;
    /**
     * The full name of the county in which this place exists.
     * @type {string}
     * @memberof Place
     */
    country?: string;
    /**
     * A two-letter ISO 3166-1 alpha-2 country code.
     * @type {string}
     * @memberof Place
     */
    countryCode?: string;
    /**
     * The full name of this place.
     * @type {string}
     * @memberof Place
     */
    fullName: string;
    /**
     * 
     * @type {Geo}
     * @memberof Place
     */
    geo?: Geo;
    /**
     * The identifier for this place.
     * @type {string}
     * @memberof Place
     */
    id: string;
    /**
     * The human readable name of this place.
     * @type {string}
     * @memberof Place
     */
    name?: string;
    /**
     * 
     * @type {PlaceType}
     * @memberof Place
     */
    placeType?: PlaceType;
}

/**
 * Check if a given object implements the Place interface.
 */
export function instanceOfPlace(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "fullName" in value;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function PlaceFromJSON(json: any): Place {
    return PlaceFromJSONTyped(json, false);
}

export function PlaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Place {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'containedWithin': !exists(json, 'contained_within') ? undefined : json['contained_within'],
        'country': !exists(json, 'country') ? undefined : json['country'],
        'countryCode': !exists(json, 'country_code') ? undefined : json['country_code'],
        'fullName': json['full_name'],
        'geo': !exists(json, 'geo') ? undefined : GeoFromJSON(json['geo']),
        'id': json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'placeType': !exists(json, 'place_type') ? undefined : PlaceTypeFromJSON(json['place_type']),
    };
}

export function PlaceToJSON(value?: Place | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'contained_within': value.containedWithin,
        'country': value.country,
        'country_code': value.countryCode,
        'full_name': value.fullName,
        'geo': GeoToJSON(value.geo),
        'id': value.id,
        'name': value.name,
        'place_type': PlaceTypeToJSON(value.placeType),
    };
}

