/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Problem } from './Problem';
import {
    ProblemFromJSON,
    ProblemFromJSONTyped,
    ProblemToJSON,
} from './Problem';
import type { UsageCapExceededProblemAllOf } from './UsageCapExceededProblemAllOf';
import {
    UsageCapExceededProblemAllOfFromJSON,
    UsageCapExceededProblemAllOfFromJSONTyped,
    UsageCapExceededProblemAllOfToJSON,
} from './UsageCapExceededProblemAllOf';

/**
 * A problem that indicates that a usage cap has been exceeded.
 * @export
 * @interface UsageCapExceededProblem
 */
export interface UsageCapExceededProblem extends Problem {
    /**
     * 
     * @type {string}
     * @memberof UsageCapExceededProblem
     */
    period?: UsageCapExceededProblemPeriodEnum;
    /**
     * 
     * @type {string}
     * @memberof UsageCapExceededProblem
     */
    scope?: UsageCapExceededProblemScopeEnum;
}


/**
 * @export
 */
export const UsageCapExceededProblemPeriodEnum = {
    Daily: 'Daily',
    Monthly: 'Monthly'
} as const;
export type UsageCapExceededProblemPeriodEnum = typeof UsageCapExceededProblemPeriodEnum[keyof typeof UsageCapExceededProblemPeriodEnum];

/**
 * @export
 */
export const UsageCapExceededProblemScopeEnum = {
    Account: 'Account',
    Product: 'Product'
} as const;
export type UsageCapExceededProblemScopeEnum = typeof UsageCapExceededProblemScopeEnum[keyof typeof UsageCapExceededProblemScopeEnum];


/**
 * Check if a given object implements the UsageCapExceededProblem interface.
 */
export function instanceOfUsageCapExceededProblem(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UsageCapExceededProblemFromJSON(json: any): UsageCapExceededProblem {
    return UsageCapExceededProblemFromJSONTyped(json, false);
}

export function UsageCapExceededProblemFromJSONTyped(json: any, ignoreDiscriminator: boolean): UsageCapExceededProblem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...ProblemFromJSONTyped(json, ignoreDiscriminator),
        'period': !exists(json, 'period') ? undefined : json['period'],
        'scope': !exists(json, 'scope') ? undefined : json['scope'],
    };
}

export function UsageCapExceededProblemToJSON(value?: UsageCapExceededProblem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...ProblemToJSON(value),
        'period': value.period,
        'scope': value.scope,
    };
}

