/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Problem } from './Problem';
import {
    ProblemFromJSON,
    ProblemFromJSONTyped,
    ProblemToJSON,
} from './Problem';
import type { Rule } from './Rule';
import {
    RuleFromJSON,
    RuleFromJSONTyped,
    RuleToJSON,
} from './Rule';
import type { RulesResponseMetadata } from './RulesResponseMetadata';
import {
    RulesResponseMetadataFromJSON,
    RulesResponseMetadataFromJSONTyped,
    RulesResponseMetadataToJSON,
} from './RulesResponseMetadata';

/**
 * A response from modifying user-specified stream filtering rules.
 * @export
 * @interface AddOrDeleteRulesResponse
 */
export interface AddOrDeleteRulesResponse {
    /**
     * All user-specified stream filtering rules that were created.
     * @type {Array<Rule>}
     * @memberof AddOrDeleteRulesResponse
     */
    data?: Array<Rule>;
    /**
     * 
     * @type {Array<Problem>}
     * @memberof AddOrDeleteRulesResponse
     */
    errors?: Array<Problem>;
    /**
     * 
     * @type {RulesResponseMetadata}
     * @memberof AddOrDeleteRulesResponse
     */
    meta: RulesResponseMetadata;
}

/**
 * Check if a given object implements the AddOrDeleteRulesResponse interface.
 */
export function instanceOfAddOrDeleteRulesResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "meta" in value;

    return isInstance;
}

export function AddOrDeleteRulesResponseFromJSON(json: any): AddOrDeleteRulesResponse {
    return AddOrDeleteRulesResponseFromJSONTyped(json, false);
}

export function AddOrDeleteRulesResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddOrDeleteRulesResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': !exists(json, 'data') ? undefined : ((json['data'] as Array<any>).map(RuleFromJSON)),
        'errors': !exists(json, 'errors') ? undefined : ((json['errors'] as Array<any>).map(ProblemFromJSON)),
        'meta': RulesResponseMetadataFromJSON(json['meta']),
    };
}

export function AddOrDeleteRulesResponseToJSON(value?: AddOrDeleteRulesResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': value.data === undefined ? undefined : ((value.data as Array<any>).map(RuleToJSON)),
        'errors': value.errors === undefined ? undefined : ((value.errors as Array<any>).map(ProblemToJSON)),
        'meta': RulesResponseMetadataToJSON(value.meta),
    };
}

