/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EntityIndicesInclusiveInclusive } from './EntityIndicesInclusiveInclusive';
import {
    EntityIndicesInclusiveInclusiveFromJSON,
    EntityIndicesInclusiveInclusiveFromJSONTyped,
    EntityIndicesInclusiveInclusiveToJSON,
} from './EntityIndicesInclusiveInclusive';
import type { FullTextEntitiesAnnotationsInnerAllOf } from './FullTextEntitiesAnnotationsInnerAllOf';
import {
    FullTextEntitiesAnnotationsInnerAllOfFromJSON,
    FullTextEntitiesAnnotationsInnerAllOfFromJSONTyped,
    FullTextEntitiesAnnotationsInnerAllOfToJSON,
} from './FullTextEntitiesAnnotationsInnerAllOf';

/**
 * Annotation for entities based on the Tweet text.
 * @export
 * @interface FullTextEntitiesAnnotationsInner
 */
export interface FullTextEntitiesAnnotationsInner {
    /**
     * Index (zero-based) at which position this entity ends.  The index is inclusive.
     * @type {number}
     * @memberof FullTextEntitiesAnnotationsInner
     */
    end: number;
    /**
     * Index (zero-based) at which position this entity starts.  The index is inclusive.
     * @type {number}
     * @memberof FullTextEntitiesAnnotationsInner
     */
    start: number;
    /**
     * Text used to determine annotation.
     * @type {string}
     * @memberof FullTextEntitiesAnnotationsInner
     */
    normalizedText?: string;
    /**
     * Confidence factor for annotation type.
     * @type {number}
     * @memberof FullTextEntitiesAnnotationsInner
     */
    probability?: number;
    /**
     * Annotation type.
     * @type {string}
     * @memberof FullTextEntitiesAnnotationsInner
     */
    type?: string;
}

/**
 * Check if a given object implements the FullTextEntitiesAnnotationsInner interface.
 */
export function instanceOfFullTextEntitiesAnnotationsInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "end" in value;
    isInstance = isInstance && "start" in value;

    return isInstance;
}

export function FullTextEntitiesAnnotationsInnerFromJSON(json: any): FullTextEntitiesAnnotationsInner {
    return FullTextEntitiesAnnotationsInnerFromJSONTyped(json, false);
}

export function FullTextEntitiesAnnotationsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): FullTextEntitiesAnnotationsInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'end': json['end'],
        'start': json['start'],
        'normalizedText': !exists(json, 'normalized_text') ? undefined : json['normalized_text'],
        'probability': !exists(json, 'probability') ? undefined : json['probability'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function FullTextEntitiesAnnotationsInnerToJSON(value?: FullTextEntitiesAnnotationsInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'end': value.end,
        'start': value.start,
        'normalized_text': value.normalizedText,
        'probability': value.probability,
        'type': value.type,
    };
}

