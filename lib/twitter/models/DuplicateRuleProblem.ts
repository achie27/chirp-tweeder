/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DuplicateRuleProblemAllOf } from './DuplicateRuleProblemAllOf';
import {
    DuplicateRuleProblemAllOfFromJSON,
    DuplicateRuleProblemAllOfFromJSONTyped,
    DuplicateRuleProblemAllOfToJSON,
} from './DuplicateRuleProblemAllOf';
import type { Problem } from './Problem';
import {
    ProblemFromJSON,
    ProblemFromJSONTyped,
    ProblemToJSON,
} from './Problem';

/**
 * The rule you have submitted is a duplicate.
 * @export
 * @interface DuplicateRuleProblem
 */
export interface DuplicateRuleProblem extends Problem {
    /**
     * 
     * @type {string}
     * @memberof DuplicateRuleProblem
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DuplicateRuleProblem
     */
    value?: string;
}

/**
 * Check if a given object implements the DuplicateRuleProblem interface.
 */
export function instanceOfDuplicateRuleProblem(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DuplicateRuleProblemFromJSON(json: any): DuplicateRuleProblem {
    return DuplicateRuleProblemFromJSONTyped(json, false);
}

export function DuplicateRuleProblemFromJSONTyped(json: any, ignoreDiscriminator: boolean): DuplicateRuleProblem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...ProblemFromJSONTyped(json, ignoreDiscriminator),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'value': !exists(json, 'value') ? undefined : json['value'],
    };
}

export function DuplicateRuleProblemToJSON(value?: DuplicateRuleProblem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...ProblemToJSON(value),
        'id': value.id,
        'value': value.value,
    };
}

