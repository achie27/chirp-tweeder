/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
     GenericProblemFromJSONTyped,
     ClientDisconnectedProblemFromJSONTyped,
     ClientForbiddenProblemFromJSONTyped,
     ConflictProblemFromJSONTyped,
     DisallowedResourceProblemFromJSONTyped,
     DuplicateRuleProblemFromJSONTyped,
     InvalidRequestProblemFromJSONTyped,
     InvalidRuleProblemFromJSONTyped,
     NonCompliantRulesProblemFromJSONTyped,
     FieldUnauthorizedProblemFromJSONTyped,
     ResourceUnauthorizedProblemFromJSONTyped,
     OperationalDisconnectProblemFromJSONTyped,
     ResourceNotFoundProblemFromJSONTyped,
     ResourceUnavailableProblemFromJSONTyped,
     RulesCapProblemFromJSONTyped,
     ConnectionExceptionProblemFromJSONTyped,
     UnsupportedAuthenticationProblemFromJSONTyped,
     UsageCapExceededProblemFromJSONTyped
} from './';

/**
 * An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807).
 * @export
 * @interface Problem
 */
export interface Problem {
    /**
     * 
     * @type {string}
     * @memberof Problem
     */
    detail?: string;
    /**
     * 
     * @type {number}
     * @memberof Problem
     */
    status?: number;
    /**
     * 
     * @type {string}
     * @memberof Problem
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Problem
     */
    type: string;
}

/**
 * Check if a given object implements the Problem interface.
 */
export function instanceOfProblem(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function ProblemFromJSON(json: any): Problem {
    return ProblemFromJSONTyped(json, false);
}

export function ProblemFromJSONTyped(json: any, ignoreDiscriminator: boolean): Problem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'about:blank') {
            return GenericProblemFromJSONTyped(json, true);
        }
        if (json['type'] === 'https://api.twitter.com/2/problems/client-disconnected') {
            return ClientDisconnectedProblemFromJSONTyped(json, true);
        }
        if (json['type'] === 'https://api.twitter.com/2/problems/client-forbidden') {
            return ClientForbiddenProblemFromJSONTyped(json, true);
        }
        if (json['type'] === 'https://api.twitter.com/2/problems/conflict') {
            return ConflictProblemFromJSONTyped(json, true);
        }
        if (json['type'] === 'https://api.twitter.com/2/problems/disallowed-resource') {
            return DisallowedResourceProblemFromJSONTyped(json, true);
        }
        if (json['type'] === 'https://api.twitter.com/2/problems/duplicate-rules') {
            return DuplicateRuleProblemFromJSONTyped(json, true);
        }
        if (json['type'] === 'https://api.twitter.com/2/problems/invalid-request') {
            return InvalidRequestProblemFromJSONTyped(json, true);
        }
        if (json['type'] === 'https://api.twitter.com/2/problems/invalid-rules') {
            return InvalidRuleProblemFromJSONTyped(json, true);
        }
        if (json['type'] === 'https://api.twitter.com/2/problems/noncompliant-rules') {
            return NonCompliantRulesProblemFromJSONTyped(json, true);
        }
        if (json['type'] === 'https://api.twitter.com/2/problems/not-authorized-for-field') {
            return FieldUnauthorizedProblemFromJSONTyped(json, true);
        }
        if (json['type'] === 'https://api.twitter.com/2/problems/not-authorized-for-resource') {
            return ResourceUnauthorizedProblemFromJSONTyped(json, true);
        }
        if (json['type'] === 'https://api.twitter.com/2/problems/operational-disconnect') {
            return OperationalDisconnectProblemFromJSONTyped(json, true);
        }
        if (json['type'] === 'https://api.twitter.com/2/problems/resource-not-found') {
            return ResourceNotFoundProblemFromJSONTyped(json, true);
        }
        if (json['type'] === 'https://api.twitter.com/2/problems/resource-unavailable') {
            return ResourceUnavailableProblemFromJSONTyped(json, true);
        }
        if (json['type'] === 'https://api.twitter.com/2/problems/rule-cap') {
            return RulesCapProblemFromJSONTyped(json, true);
        }
        if (json['type'] === 'https://api.twitter.com/2/problems/streaming-connection') {
            return ConnectionExceptionProblemFromJSONTyped(json, true);
        }
        if (json['type'] === 'https://api.twitter.com/2/problems/unsupported-authentication') {
            return UnsupportedAuthenticationProblemFromJSONTyped(json, true);
        }
        if (json['type'] === 'https://api.twitter.com/2/problems/usage-capped') {
            return UsageCapExceededProblemFromJSONTyped(json, true);
        }
    }
    return {
        
        'detail': !exists(json, 'detail') ? undefined : json['detail'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'title': json['title'],
        'type': json['type'],
    };
}

export function ProblemToJSON(value?: Problem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'detail': value.detail,
        'status': value.status,
        'title': value.title,
        'type': value.type,
    };
}

