/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContextAnnotationDomainFields } from './ContextAnnotationDomainFields';
import {
    ContextAnnotationDomainFieldsFromJSON,
    ContextAnnotationDomainFieldsFromJSONTyped,
    ContextAnnotationDomainFieldsToJSON,
} from './ContextAnnotationDomainFields';
import type { ContextAnnotationEntityFields } from './ContextAnnotationEntityFields';
import {
    ContextAnnotationEntityFieldsFromJSON,
    ContextAnnotationEntityFieldsFromJSONTyped,
    ContextAnnotationEntityFieldsToJSON,
} from './ContextAnnotationEntityFields';

/**
 * Annotation inferred from the Tweet text.
 * @export
 * @interface ContextAnnotation
 */
export interface ContextAnnotation {
    /**
     * 
     * @type {ContextAnnotationDomainFields}
     * @memberof ContextAnnotation
     */
    domain: ContextAnnotationDomainFields;
    /**
     * 
     * @type {ContextAnnotationEntityFields}
     * @memberof ContextAnnotation
     */
    entity: ContextAnnotationEntityFields;
}

/**
 * Check if a given object implements the ContextAnnotation interface.
 */
export function instanceOfContextAnnotation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "domain" in value;
    isInstance = isInstance && "entity" in value;

    return isInstance;
}

export function ContextAnnotationFromJSON(json: any): ContextAnnotation {
    return ContextAnnotationFromJSONTyped(json, false);
}

export function ContextAnnotationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContextAnnotation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'domain': ContextAnnotationDomainFieldsFromJSON(json['domain']),
        'entity': ContextAnnotationEntityFieldsFromJSON(json['entity']),
    };
}

export function ContextAnnotationToJSON(value?: ContextAnnotation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'domain': ContextAnnotationDomainFieldsToJSON(value.domain),
        'entity': ContextAnnotationEntityFieldsToJSON(value.entity),
    };
}

