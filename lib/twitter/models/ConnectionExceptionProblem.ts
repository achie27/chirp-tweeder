/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConnectionExceptionProblemAllOf } from './ConnectionExceptionProblemAllOf';
import {
    ConnectionExceptionProblemAllOfFromJSON,
    ConnectionExceptionProblemAllOfFromJSONTyped,
    ConnectionExceptionProblemAllOfToJSON,
} from './ConnectionExceptionProblemAllOf';
import type { Problem } from './Problem';
import {
    ProblemFromJSON,
    ProblemFromJSONTyped,
    ProblemToJSON,
} from './Problem';

/**
 * A problem that indicates something is wrong with the connection.
 * @export
 * @interface ConnectionExceptionProblem
 */
export interface ConnectionExceptionProblem extends Problem {
    /**
     * 
     * @type {string}
     * @memberof ConnectionExceptionProblem
     */
    connectionIssue?: ConnectionExceptionProblemConnectionIssueEnum;
}


/**
 * @export
 */
export const ConnectionExceptionProblemConnectionIssueEnum = {
    TooManyConnections: 'TooManyConnections',
    ProvisioningSubscription: 'ProvisioningSubscription',
    RuleConfigurationIssue: 'RuleConfigurationIssue',
    RulesInvalidIssue: 'RulesInvalidIssue'
} as const;
export type ConnectionExceptionProblemConnectionIssueEnum = typeof ConnectionExceptionProblemConnectionIssueEnum[keyof typeof ConnectionExceptionProblemConnectionIssueEnum];


/**
 * Check if a given object implements the ConnectionExceptionProblem interface.
 */
export function instanceOfConnectionExceptionProblem(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConnectionExceptionProblemFromJSON(json: any): ConnectionExceptionProblem {
    return ConnectionExceptionProblemFromJSONTyped(json, false);
}

export function ConnectionExceptionProblemFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectionExceptionProblem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...ProblemFromJSONTyped(json, ignoreDiscriminator),
        'connectionIssue': !exists(json, 'connection_issue') ? undefined : json['connection_issue'],
    };
}

export function ConnectionExceptionProblemToJSON(value?: ConnectionExceptionProblem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...ProblemToJSON(value),
        'connection_issue': value.connectionIssue,
    };
}

