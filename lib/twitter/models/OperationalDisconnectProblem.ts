/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OperationalDisconnectProblemAllOf } from './OperationalDisconnectProblemAllOf';
import {
    OperationalDisconnectProblemAllOfFromJSON,
    OperationalDisconnectProblemAllOfFromJSONTyped,
    OperationalDisconnectProblemAllOfToJSON,
} from './OperationalDisconnectProblemAllOf';
import type { Problem } from './Problem';
import {
    ProblemFromJSON,
    ProblemFromJSONTyped,
    ProblemToJSON,
} from './Problem';

/**
 * You have been disconnected for operational reasons.
 * @export
 * @interface OperationalDisconnectProblem
 */
export interface OperationalDisconnectProblem extends Problem {
    /**
     * 
     * @type {string}
     * @memberof OperationalDisconnectProblem
     */
    disconnectType?: OperationalDisconnectProblemDisconnectTypeEnum;
}


/**
 * @export
 */
export const OperationalDisconnectProblemDisconnectTypeEnum = {
    OperationalDisconnect: 'OperationalDisconnect',
    UpstreamOperationalDisconnect: 'UpstreamOperationalDisconnect',
    ForceDisconnect: 'ForceDisconnect',
    UpstreamUncleanDisconnect: 'UpstreamUncleanDisconnect',
    SlowReader: 'SlowReader',
    InternalError: 'InternalError',
    ClientApplicationStateDegraded: 'ClientApplicationStateDegraded',
    InvalidRules: 'InvalidRules'
} as const;
export type OperationalDisconnectProblemDisconnectTypeEnum = typeof OperationalDisconnectProblemDisconnectTypeEnum[keyof typeof OperationalDisconnectProblemDisconnectTypeEnum];


/**
 * Check if a given object implements the OperationalDisconnectProblem interface.
 */
export function instanceOfOperationalDisconnectProblem(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OperationalDisconnectProblemFromJSON(json: any): OperationalDisconnectProblem {
    return OperationalDisconnectProblemFromJSONTyped(json, false);
}

export function OperationalDisconnectProblemFromJSONTyped(json: any, ignoreDiscriminator: boolean): OperationalDisconnectProblem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...ProblemFromJSONTyped(json, ignoreDiscriminator),
        'disconnectType': !exists(json, 'disconnect_type') ? undefined : json['disconnect_type'],
    };
}

export function OperationalDisconnectProblemToJSON(value?: OperationalDisconnectProblem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...ProblemToJSON(value),
        'disconnect_type': value.disconnectType,
    };
}

