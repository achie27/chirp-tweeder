/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Media } from './Media';
import {
    MediaFromJSON,
    MediaFromJSONTyped,
    MediaToJSON,
} from './Media';
import type { Place } from './Place';
import {
    PlaceFromJSON,
    PlaceFromJSONTyped,
    PlaceToJSON,
} from './Place';
import type { Poll } from './Poll';
import {
    PollFromJSON,
    PollFromJSONTyped,
    PollToJSON,
} from './Poll';
import type { Topic } from './Topic';
import {
    TopicFromJSON,
    TopicFromJSONTyped,
    TopicToJSON,
} from './Topic';
import type { Tweet } from './Tweet';
import {
    TweetFromJSON,
    TweetFromJSONTyped,
    TweetToJSON,
} from './Tweet';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Expansions
 */
export interface Expansions {
    /**
     * 
     * @type {Array<Media>}
     * @memberof Expansions
     */
    media?: Array<Media>;
    /**
     * 
     * @type {Array<Place>}
     * @memberof Expansions
     */
    places?: Array<Place>;
    /**
     * 
     * @type {Array<Poll>}
     * @memberof Expansions
     */
    polls?: Array<Poll>;
    /**
     * 
     * @type {Array<Topic>}
     * @memberof Expansions
     */
    topics?: Array<Topic>;
    /**
     * 
     * @type {Array<Tweet>}
     * @memberof Expansions
     */
    tweets?: Array<Tweet>;
    /**
     * 
     * @type {Array<User>}
     * @memberof Expansions
     */
    users?: Array<User>;
}

/**
 * Check if a given object implements the Expansions interface.
 */
export function instanceOfExpansions(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExpansionsFromJSON(json: any): Expansions {
    return ExpansionsFromJSONTyped(json, false);
}

export function ExpansionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Expansions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'media': !exists(json, 'media') ? undefined : ((json['media'] as Array<any>).map(MediaFromJSON)),
        'places': !exists(json, 'places') ? undefined : ((json['places'] as Array<any>).map(PlaceFromJSON)),
        'polls': !exists(json, 'polls') ? undefined : ((json['polls'] as Array<any>).map(PollFromJSON)),
        'topics': !exists(json, 'topics') ? undefined : ((json['topics'] as Array<any>).map(TopicFromJSON)),
        'tweets': !exists(json, 'tweets') ? undefined : ((json['tweets'] as Array<any>).map(TweetFromJSON)),
        'users': !exists(json, 'users') ? undefined : ((json['users'] as Array<any>).map(UserFromJSON)),
    };
}

export function ExpansionsToJSON(value?: Expansions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'media': value.media === undefined ? undefined : ((value.media as Array<any>).map(MediaToJSON)),
        'places': value.places === undefined ? undefined : ((value.places as Array<any>).map(PlaceToJSON)),
        'polls': value.polls === undefined ? undefined : ((value.polls as Array<any>).map(PollToJSON)),
        'topics': value.topics === undefined ? undefined : ((value.topics as Array<any>).map(TopicToJSON)),
        'tweets': value.tweets === undefined ? undefined : ((value.tweets as Array<any>).map(TweetToJSON)),
        'users': value.users === undefined ? undefined : ((value.users as Array<any>).map(UserToJSON)),
    };
}

