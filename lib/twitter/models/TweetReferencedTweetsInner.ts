/* tslint:disable */
/* eslint-disable */
/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TweetReferencedTweetsInner
 */
export interface TweetReferencedTweetsInner {
    /**
     * Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
     * @type {string}
     * @memberof TweetReferencedTweetsInner
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof TweetReferencedTweetsInner
     */
    type: TweetReferencedTweetsInnerTypeEnum;
}


/**
 * @export
 */
export const TweetReferencedTweetsInnerTypeEnum = {
    Retweeted: 'retweeted',
    Quoted: 'quoted',
    RepliedTo: 'replied_to'
} as const;
export type TweetReferencedTweetsInnerTypeEnum = typeof TweetReferencedTweetsInnerTypeEnum[keyof typeof TweetReferencedTweetsInnerTypeEnum];


/**
 * Check if a given object implements the TweetReferencedTweetsInner interface.
 */
export function instanceOfTweetReferencedTweetsInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function TweetReferencedTweetsInnerFromJSON(json: any): TweetReferencedTweetsInner {
    return TweetReferencedTweetsInnerFromJSONTyped(json, false);
}

export function TweetReferencedTweetsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): TweetReferencedTweetsInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
    };
}

export function TweetReferencedTweetsInnerToJSON(value?: TweetReferencedTweetsInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
    };
}

